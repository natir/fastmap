var searchIndex = JSON.parse('{\
"in_place_fastx":{"doc":"","t":[17,0,0,0,14,14,0,14,14,14,14,14,14,0,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0],"n":["DEFAULT_BLOCKSIZE","block","error","fasta","fasta_sequential","fasta_sharedstate","fastq","fastq_sequential","fastq_sharedstate","impl_producer","impl_reader","impl_sequential","impl_sharedstate","parser","Block","Record","borrow","borrow","borrow_mut","borrow_mut","comment","data","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","is_empty","len","new","plus","quality","sequence","try_from","try_from","try_into","try_into","type_id","type_id","Error","MapFile","MetaDataFile","NoNewLineInBlock","NotAFastaFile","NotAFastqFile","OpenFile","PartialRecord","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","source","to_string","try_from","try_into","type_id","source","source","source","Producer","Reader","blocksize","borrow","borrow","borrow_mut","borrow_mut","correct_block_size","deref","deref","deref_mut","deref_mut","drop","drop","file","file_length","filesize","fix_blocksize","from","from","get_line","init","init","into","into","into_iter","new","new","next","next_block","next_record","offset","set_offset","try_from","try_from","try_into","try_into","type_id","type_id","with_blocksize","Producer","Reader","blocksize","borrow","borrow","borrow_mut","borrow_mut","correct_block_size","deref","deref","deref_mut","deref_mut","drop","drop","file","file_length","filesize","fix_blocksize","from","from","get_line","init","init","into","into","into_iter","new","new","next","next_block","next_record","offset","set_offset","try_from","try_from","try_into","try_into","type_id","type_id","with_blocksize","sequential","shared_state"],"q":["in_place_fastx","","","","","","","","","","","","","","in_place_fastx::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::error","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::error::Error","","","in_place_fastx::fasta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::fastq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::parser",""],"d":["","Struct that extract part of file (called block) and read …","","Struct that extract part of file (called block) and read …","","","Struct that extract part of file (called block) and read …","","","","","","","","Block reperesent a section of file memory mapped in file","","","","","","","Acces to data owned by block","","","","","","","","","","","","","","Return true if the block is empty","Get length of block","Create a new Block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get blocksize","","","","","Search the begin of the partial record at the end of Block","","","","","","","Get file","Get file length","Get file size","Fix blocksize","","","","","","","","","Create a new Block producer","","","","","Get current value of offset","Set value of offset","","","","","","","","","","Get blocksize","","","","","Search the begin of the partial record at the end of Block","","","","","","","Get file","Get file length","Get file size","Fix blocksize","","","","","","","","","Create a new Block producer","","","","","Get current value of offset","Set value of offset","","","","","","","","","Struct that extract part of file (called block), each …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,2,2,1,1,1,1,2,1,2,1,2,0,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,0,0,7,7,8,7,8,7,7,8,7,8,7,8,7,7,7,7,7,8,8,7,8,7,8,7,7,8,7,7,8,7,7,7,8,7,8,7,8,7,0,0,9,9,10,9,10,9,9,10,9,10,9,10,9,9,9,9,9,10,10,9,10,9,10,9,9,10,9,9,10,9,9,9,10,9,10,9,10,9,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15],["mmap",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[],[["result",6],["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["file",3]],[[],["u64",15]],[[],[["result",6],["u64",15]]],[[["u64",15]],[["result",6],["u64",15]]],[[]],[[]],[[["usize",15],["block",3]],[["result",6],["range",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",6]],[[["block",3]]],[[],["option",4]],[[],[["result",6],["option",4]]],[[],[["option",4],["result",6]]],[[],["u64",15]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["result",6]],null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[],[["result",6],["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["file",3]],[[],["u64",15]],[[],[["result",6],["u64",15]]],[[["u64",15]],[["result",6],["u64",15]]],[[]],[[]],[[["usize",15],["block",3]],[["result",6],["range",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",6]],[[["block",3]]],[[],["option",4]],[[],[["result",6],["option",4]]],[[],[["option",4],["result",6]]],[[],["u64",15]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["result",6]],null,null],"p":[[3,"Record"],[3,"Block"],[4,"Error"],[13,"MetaDataFile"],[13,"OpenFile"],[13,"MapFile"],[3,"Producer"],[3,"Reader"],[3,"Producer"],[3,"Reader"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};