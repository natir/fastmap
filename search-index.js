var searchIndex = JSON.parse('{\
"in_place_fastx":{"doc":"","t":[17,0,0,0,0,0,3,8,8,3,10,11,11,11,11,12,10,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,12,12,12,10,11,11,11,11,11,11,10,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,8,11,11,10,11,8,11,11],"n":["DEFAULT_BLOCKSIZE","block","error","fasta","fastq","parser","Block","Producer","Reader","Record","blocksize","borrow","borrow","borrow_mut","borrow_mut","comment","correct_block_size","data","data","deref","deref","deref_mut","deref_mut","drop","drop","file","file_length","filesize","fix_blocksize","fmt","from","from","get_line","init","init","into","into","is_empty","len","new","new","new","next_block","next_record","offset","offset","plus","quality","sequence","set_offset","try_from","try_from","try_into","try_into","type_id","type_id","with_blocksize","Error","MapFile","MetaDataFile","NoNewLineInBlock","NotAFastaFile","NotAFastqFile","OpenFile","PartialRecord","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","source","to_string","try_from","try_into","type_id","source","source","source","Producer","Reader","blocksize","borrow","borrow","borrow_mut","borrow_mut","correct_block_size","data","deref","deref","deref_mut","deref_mut","drop","drop","file","file_length","from","from","init","init","into","into","into_iter","new","next","next_record","offset","offset","set_offset","try_from","try_from","try_into","try_into","type_id","type_id","with_blocksize","Producer","Reader","blocksize","borrow","borrow","borrow_mut","borrow_mut","correct_block_size","data","deref","deref","deref_mut","deref_mut","drop","drop","file","file_length","from","from","init","init","into","into","into_iter","new","next","next_record","offset","offset","set_offset","try_from","try_from","try_into","try_into","type_id","type_id","with_blocksize","sequential","shared_state","Sequential","block","parse","record","with_blocksize","SharedState","parse","with_blocksize"],"q":["in_place_fastx","","","","","","in_place_fastx::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::error","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::error::Error","","","in_place_fastx::fasta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::fastq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place_fastx::parser","","in_place_fastx::parser::sequential","","","","","in_place_fastx::parser::shared_state","",""],"d":["","Struct that extract part of file (called block) and read …","","Struct that extract part of file (called block) and read …","Struct that extract part of file (called block) and read …","","Block reperesent a section of file memory mapped in file","Trait to produce block","","","Get blocksize","","","","","","Search the begin of the partial record at the end of […","","Acces to data owned by block","","","","","","","Get file","Get file length","Get file size","Fix blocksize","","","","Search next end of line","","","","","Return true if the block is empty","Get length of block","","Create a new Block producer","Create a new Block","Get the next Block, all Block contains almost one record","","Get current value of offset","","","","","Set value of offset","","","","","","","Create a new Block producer with a specific blocksize","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct that produce a Block of file, this block contains …","Struct that read Block and produce Record","Get blocksize","","","","","Search the begin of the partial record at the end of Block","","","","","","","","Get file","Get file length","","","","","","","","","","","Get current value of offset","","Set value of offset","","","","","","","Build a Block producer, with a specific Block size …","Struct that produce a Block of file, this block contains …","Struct that read Block and produce Record","Get blocksize","","","","","Search the begin of the partial record at the end of Block","","","","","","","","Get file","Get file length","","","","","","","","Create a new Block reader from Block get in parameter","","Produce Record until block is empty","Get current value of offset","","Set value of offset","","","","","","","Build a Block producer, with a specific Block size …","","Struct that extract part of file (called block), each …","Trait allow sequential parsing of fastq","Method call to parse a block","Parse file indicate by path with default blocksize […","Method call to parse a record","Parse file indicate by path with selected blocksize","Trait allow parallel parsing of block.","Parse file indicate by path with default blocksize […","Parse file indicate by path with selected blocksize"],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,2,3,2,1,4,3,2,3,2,3,2,3,1,1,1,1,3,2,3,4,2,3,2,3,3,3,4,1,3,1,4,1,4,2,2,2,1,2,3,2,3,2,3,1,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,8,0,0,9,9,10,9,10,9,10,9,10,9,10,9,10,9,9,9,10,9,10,9,10,9,10,9,10,9,10,9,9,10,9,10,9,10,9,0,0,11,11,12,11,12,11,12,11,12,11,12,11,12,11,11,11,12,11,12,11,12,11,12,11,12,11,12,11,11,12,11,12,11,12,11,0,0,0,13,13,13,13,0,14,14],"f":[null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],null,[[],[["result",6],["u64",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["file",3]],[[],["u64",15]],[[],[["result",6],["u64",15]]],[[["u64",15]],[["result",6],["u64",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["result",6],["range",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["block",3]]],[[],["result",6]],[[["usize",15],["mmap",3]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],["u64",15]],[[],["usize",15]],null,null,null,[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["result",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[],[["result",6],["u64",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["file",3]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["block",3]]],[[],["option",4]],[[],[["option",4],["result",6]]],[[],["u64",15]],[[],["usize",15]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["result",6]],null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[],[["result",6],["u64",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["file",3]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["block",3]]],[[],["option",4]],[[],[["option",4],["result",6]]],[[],["u64",15]],[[],["usize",15]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],[["result",4],["error",4]]],null,null,null,[[["block",3]],["result",6]],[[],["result",6]],[[["record",3]]],[[["u64",15]],["result",6]],null,[[],["result",6]],[[["u64",15]],["result",6]]],"p":[[8,"Producer"],[3,"Record"],[3,"Block"],[8,"Reader"],[4,"Error"],[13,"MetaDataFile"],[13,"OpenFile"],[13,"MapFile"],[3,"Producer"],[3,"Reader"],[3,"Producer"],[3,"Reader"],[8,"Sequential"],[8,"SharedState"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};